* database
  npm install --save @nestjs/typeorm typeorm@0.2 mysql2

* Configuration
  npm i --save @nestjs/config   
  
* Validation
  npm i --save class-validator class-transformer

* Caching
  npm install cache-manager
  npm install -D @types/cache-manager

* Serialization      

* Encryption and Hashing
  npm i bcrypt
  npm i -D @types/bcrypt
  npm i nestjs-config


  npm i --save cross-env dotenv helmet husky lint-staged lodash moment 

  npm i winston winston-daily-rotate-file uuid

* openapi
  npm install --save @nestjs/swagger swagger-ui-express

* Authentication

$ npm install --save @nestjs/passport passport passport-local
$ npm install --save-dev @types/passport-local

* JWT functionality#
$ npm install --save @nestjs/jwt passport-jwt
$ npm install --save-dev @types/passport-jwt

 npm i --save @nestjs/swagger


npm i --D @types/jsonwebtoken @types/lodash @types/uuid @types/jsonwebtoken @types/dotenv


npm i --save simp-node-auth



TypeOrmModule.forRootAsync({
      useFactory: async (config: ConfigService) => ({        
        type: config.get('database.type'),
        host: config.get('database.host'),
        port: config.get('database.port'),
        username: config.get('database.username'),
        password: config.get('database.password'),
        database: config.get('database.database'),
        entities: [__dirname + '/**/*.entity{.ts,.js}'],
        logging: config.get('database.logging'),
        synchronize: true, // 데이터베이스 동기화
        timezone: '+08:00', // 이스트 8 지구
        cache: {
          duration: 60000, // 1분 캐시
        },
        extra: {
          poolMax: 32,
          poolMin: 16,
          queueTimeout: 60000,
          pollPingInterval: 60, // 60초마다 연결
          pollTimeout: 60, // 60초 동안 유효한 연결
        },
      }),
      inject: [ConfigService],
    })
    